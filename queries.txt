****SELECT****

1- Selezionare tutte le software house americane (3)

SELECT * FROM software_houses 
	WHERE software_houses.country LIKE 'united states'; 

2- Selezionare tutti i giocatori della cittÃ  di 'Rogahnland' (2)

SELECT * FROM players 
	WHERE players.city LIKE 'Rogahnland'; 

3- Selezionare tutti i giocatori il cui nome finisce per "a" (220)

SELECT * FROM players 
	WHERE players.name LIKE '%a'; 

4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800 (11)

SELECT * FROM reviews 
	WHERE reviews.player_id = 800; 

5- Contare quanti tornei ci sono stati nell'anno 2015 (9)

SELECT COUNT(*), tournaments.year
 FROM tournaments
WHERE tournaments.year = 2015;

6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' (2)

SELECT *
 FROM awards
WHERE awards.description LIKE '%facere%';

7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta (del videogioco vogliamo solo l'ID) (287)

SELECT  DISTINCT videogame_id FROM `category_videogame`
WHERE category_id = 2 OR category_id = 6;

8- Selezionare tutte le recensioni con voto compreso tra 2 e 4 (2947)

SELECT * FROM reviews
WHERE reviews.rating < 5 AND reviews.rating > 1;

SELECT * FROM reviews
WHERE reviews.rating BETWEEN 2 AND 4;

9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020 (46)

SELECT * FROM `videogames`
WHERE YEAR(release_date) = 2020;

10- Selezionare gli id videogame che hanno ricevuto almeno una recensione da 5 stelle, mostrandoli una sola volta (443)

SELECT DISTINCT videogame_id FROM reviews
WHERE rating = 5;

--BONUS-- 

11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 (review number = 12, avg_rating = 3.16 circa)

SELECT COUNT(id), AVG(rating)
FROM reviews
WHERE videogame_id = 412;

12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018 (13)

SELECT COUNT(id)
FROM videogames
WHERE software_house_id = 1
AND YEAR(release_date) = 2018;



****GROUP BY****

1- Contare quante software house ci sono per ogni paese (3)

SELECT COUNT(id), country
FROM software_houses
GROUP BY country;

2- Contare quante recensioni ha ricevuto ogni videogioco (del videogioco vogliamo solo l'ID) (500)

SELECT COUNT(id), videogame_id
FROM `reviews`
GROUP BY videogame_id;

3- Contare quanti videogiochi hanno ciascuna classificazione PEGI (della classificazione PEGI vogliamo solo l'ID) (13)

SELECT COUNT(id), pegi_label_id
 FROM `pegi_label_videogame`
 GROUP BY pegi_label_id;

4- Mostrare il numero di videogiochi rilasciati ogni anno (11)

SELECT COUNT(id), YEAR(release_date)
FROM videogames
GROUP BY YEAR(release_date);

5- Contare quanti videogiochi sono disponbiili per ciascun device (del device vogliamo solo l'ID) (7)

SELECT COUNT(id), device_id 
FROM `device_videogame`
GROUP BY device_id;

6- Ordinare i videogame in base alla media delle recensioni (del videogioco vogliamo solo l'ID) (500)

SELECT videogame_id, AVG(rating)
FROM `reviews`
GROUP BY videogame_id
ORDER BY AVG(rating) DESC;


****JOIN****

1- Selezionare i dati di tutti giocatori che hanno scritto almeno una recensione, mostrandoli una sola volta (996)

SELECT DISTINCT players.*
FROM `reviews`
JOIN players
ON reviews.player_id = players.id;

2- Sezionare tutti i videogame dei tornei tenuti nel 2016, mostrandoli una sola volta (226)

SELECT DISTINCT videogames.* 
FROM tournaments
JOIN tournament_videogame
ON tournaments.id = tournament_videogame.tournament_id
JOIN videogames
ON  tournament_videogame.videogame_id = videogames.id
WHERE tournaments.year = 2016;

3- Mostrare le categorie di ogni videogioco (1718)

SELECT videogames.name as videogame_name, categories.name as category_name
FROM videogames
JOIN category_videogame
ON videogames.id = category_videogame.videogame_id
JOIN categories
ON category_videogame.category_id = categories.id;

4- Selezionare i dati di tutte le software house che hanno rilasciato almeno un gioco dopo il 2020, mostrandoli una sola volta (6)

SELECT DISTINCT software_houses.*
FROM software_houses
JOIN videogames
ON software_houses.id = videogames.software_house_id
WHERE YEAR(videogames.release_date) > 2020;

5- Selezionare i premi ricevuti da ogni software house per i videogiochi che ha prodotto (55)

SELECT software_houses.id, awards.name
FROM software_houses
JOIN videogames
ON software_houses.id = videogames.software_house_id
JOIN award_videogame
ON videogames.id = award_videogame.videogame_id
JOIN awards
ON award_videogame.award_id= awards.id;

6- Selezionare categorie e classificazioni PEGI dei videogiochi che hanno ricevuto recensioni da 4 e 5 stelle, mostrandole una sola volta (3363)


7- Selezionare quali giochi erano presenti nei tornei nei quali hanno partecipato i giocatori il cui nome inizia per 'S' (474)

SELECT DISTINCT videogames.id
FROM videogames 
JOIN tournament_videogame
ON videogames.id = tournament_videogame.videogame_id
JOIN tournaments
ON tournament_videogame.tournament_id = tournaments.id
JOIN player_tournament
ON tournaments.id = player_tournament.tournament_id
JOIN players
ON player_tournament.player_id = players.id
WHERE players.name LIKE 's%';

8- Selezionare le cittÃ  in cui Ã¨ stato giocato il gioco dell'anno del 2018 (36)

SELECT city
FROM tournaments
JOIN tournament_videogame ON tournaments.id = tournament_videogame.tournament_id
JOIN videogames ON tournament_videogame.videogame_id = videogames.id
JOIN award_videogame ON videogames.id = award_videogame.videogame_id
JOIN awards ON award_videogame.award_id = awards.id
WHERE awards.name LIKE "Gioco dell'anno"
AND award_videogame.year = 2018
GROUP BY city;

9- Selezionare i giocatori che hanno giocato al gioco piÃ¹ atteso del 2018 in un torneo del 2019 (3306)

SELECT players.id, players.name, players.lastname
FROM awards
JOIN award_videogame
ON awards.id = award_videogame.award_id
JOIN videogames
ON videogames.id = award_videogame.id
JOIN tournament_videogame
ON videogames.id = tournament_videogame.videogame_id
JOIN tournaments
ON tournament_videogame.tournament_id = tournaments.id
JOIN player_tournament
ON player_tournament.tournament_id = tournaments.id
JOIN players
ON player_tournament.player_id = players.id
WHERE award_videogame.year = 2018 
AND awards.name LIKE '%atteso'
AND tournaments.year = 2019;

--BONUS--

10- Selezionare i dati della prima software house che ha rilasciato un gioco, assieme ai dati del gioco stesso (software house id : 5)

SELECT
    software_houses.*, videogames.*
FROM
    software_houses
JOIN
    videogames ON software_houses.id = videogames.software_house_id
LIMIT 1;

11- Selezionare i dati del videogame (id, name, release_date, totale recensioni) con piÃ¹ recensioni (videogame id : potrebbe uscire 449 o 398, sono entrambi a 20)

SELECT COUNT(reviews.id), videogames.id
FROM `reviews`
JOIN videogames
ON reviews.videogame_id = videogames.id
GROUP BY videogames.id
ORDER BY COUNT(reviews.id) DESC
LIMIT 1;

12- Selezionare la software house che ha vinto piÃ¹ premi tra il 2015 e il 2016 (software house id : potrebbe uscire 3 o 1, sono entrambi a 3)

SELECT COUNT(award_videogame.id), software_houses.*
FROM software_houses
JOIN videogames 
ON software_houses.id = videogames.software_house_id
JOIN award_videogame
ON award_videogame.videogame_id = videogames.id
WHERE award_videogame.year BETWEEN 2015 AND 2019
GROUP BY software_houses.id
ORDER BY COUNT(award_videogame.id) DESC
LIMIT 1;

13- Selezionare le categorie dei videogame i quali hanno una media recensioni inferiore a 2 (10)

SELECT AVG(reviews.rating) as avg_vote,  categories.name
FROM categories
JOIN category_videogame
ON category_videogame.category_id = categories.id
JOIN videogames
ON category_videogame.videogame_id = videogames.id
JOIN reviews 
ON reviews.videogame_id = videogames.id
GROUP BY videogames.id, categories.id
HAVING avg_vote < 2;




